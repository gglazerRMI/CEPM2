Metadata-Version: 2.1
Name: PuLP-py3
Version: 1.5.5
Summary: 
Requires-Dist: pyparsing (>=2.0.0)

Temporary fork of PuLP offering support for Python 3 while retaining
compatibility with Python 2. PuLP is an LP modeler that can generate MPS or LP
files and call GLPK, COIN CLP/CBC, CPLEX, and GUROBI to solve linear
problems.

Home-page: http://pulp-or.googlecode.com/
Author: J.S. Roy and S.A. Mitchell and G. Senarclens de Grancy
Author-email: s.mitchell@auckland.ac.nz
License: Copyright (c) 2002-2005, Jean-Sebastien Roy (js@jeannot.org)
Modifications Copyright (c) 2007- Stuart Anthony Mitchell (s.mitchell@auckland.ac.nz)
Copyright (c) 2013- Gerald Senarclens de Grancy (oss@senarclens.eu)

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


Description: 
        # Copyright J.S. Roy (js@jeannot.org), 2003-2005
        # Copyright Stuart A. Mitchell (stu@stuartmitchell.com)
        # Copyright Gerald Senarclens de Grancy (oss@senarclens.eu)
        # See the LICENSE file for copyright information.
        
        PuLP is an LP modeler written in python. PuLP can generate MPS or LP files
        and call GLPK[1], COIN CLP/CBC[2], CPLEX[3], and GUROBI[4] to solve linear
        problems.
        
        See the examples directory for examples.
        
        PuLP requires Python >= 2.5.
        
        The examples require at least a solver in your PATH or a shared library file.
        
        Documentation is found on https://www.coin-or.org/PuLP/.
        A comprehensive wiki can be found at https://www.coin-or.org/PuLP/
        
        Use LpVariable() to create new variables. To create a variable 0 <= x <= 3
        >>> x = LpVariable("x", 0, 3)
        
        To create a variable 0 <= y <= 1
        >>> y = LpVariable("y", 0, 1)
        
        Use LpProblem() to create new problems. Create "myProblem"
        >>> prob = LpProblem("myProblem", LpMinimize)
        
        Combine variables to create expressions and constraints and add them to the
        problem. 
        >>> prob += x + y <= 2
        
        If you add an expression (not a constraint), it will
        become the objective.
        >>> prob += -4*x + y
        
        Choose a solver and solve the problem. ex:
        >>> status = prob.solve(GLPK(msg = 0))
        
        Display the status of the solution
        >>> LpStatus[status]
        'Optimal'
        
        You can get the value of the variables using value(). ex:
        >>> value(x)
        2.0
        
        Exported Classes:
            - LpProblem -- Container class for a Linear programming problem
            - LpVariable -- Variables that are added to constraints in the LP
            - LpConstraint -- A constraint of the general form 
              a1x1+a2x2 ...anxn (<=, =, >=) b 
            - LpConstraintVar -- Used to construct a column of the model in column-wise 
              modelling
        
        Exported Functions:
            - value() -- Finds the value of a variable or expression
            - lpSum() -- given a list of the form [a1*x1, a2x2, ..., anxn] will construct 
              a linear expression to be used as a constraint or variable
            - lpDot() --given two lists of the form [a1, a2, ..., an] and 
              [ x1, x2, ..., xn] will construct a linear epression to be used 
              as a constraint or variable
        
        Comments, bug reports, patches and suggestions are welcome.
        pulp-or-discuss@googlegroups.com
        
        References:
        [1] http://www.gnu.org/software/glpk/glpk.html
        [2] http://www.coin-or.org/
        [3] http://www.cplex.com/
        [4] http://www.gurobi.com/
        
Keywords: Optimization,Linear Programming,Operations Research
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Environment :: Console
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: BSD License
Classifier: Natural Language :: English
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Topic :: Scientific/Engineering :: Mathematics
